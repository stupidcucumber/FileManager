# coding: utf-8# # Assignment 2# # Before working on this assignment please read these instructions fully. In the submission area, you will notice that you can click the link to **Preview the Grading** for each step of the assignment. This is the criteria that will be used for peer grading. Please familiarize yourself with the criteria before beginning the assignment.# # An NOAA dataset has been stored in the file `data/C2A2_data/BinnedCsvs_d400/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv`. This is the dataset to use for this assignment. Note: The data for this assignment comes from a subset of The National Centers for Environmental Information (NCEI) [Daily Global Historical Climatology Network](https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/readme.txt) (GHCN-Daily). The GHCN-Daily is comprised of daily climate records from thousands of land surface stations across the globe.# # Each row in the assignment datafile corresponds to a single observation.# # The following variables are provided to you:# # * **id** : station identification code# * **date** : date in YYYY-MM-DD format (e.g. 2012-01-24 = January 24, 2012)# * **element** : indicator of element type#     * TMAX : Maximum temperature (tenths of degrees C)#     * TMIN : Minimum temperature (tenths of degrees C)# * **value** : data value for element (tenths of degrees C)# # For this assignment, you must:# # 1. Read the documentation and familiarize yourself with the dataset, then write some python code which returns a line graph of the record high and record low temperatures by day of the year over the period 2005-2014. The area between the record high and record low temperatures for each day should be shaded.# 2. Overlay a scatter of the 2015 data for any points (highs and lows) for which the ten year record (2005-2014) record high or record low was broken in 2015.# 3. Watch out for leap days (i.e. February 29th), it is reasonable to remove these points from the dataset for the purpose of this visualization.# 4. Make the visual nice! Leverage principles from the first module in this course when developing your solution. Consider issues such as legends, labels, and chart junk.# # The data you have been given is near **Ann Arbor, Michigan, United States**, and the stations the data comes from are shown on the map below.# In[1]:import matplotlib.pyplot as pltimport mplleafletimport pandas as pddef leaflet_plot_stations(binsize, hashid):    df = pd.read_csv('data/C2A2_data/BinSize_d{}.csv'.format(binsize))    station_locations_by_hash = df[df['hash'] == hashid]    lons = station_locations_by_hash['LONGITUDE'].tolist()    lats = station_locations_by_hash['LATITUDE'].tolist()    plt.figure(figsize=(8,8))    plt.scatter(lons, lats, c='r', alpha=0.7, s=200)    return mplleaflet.display()leaflet_plot_stations(400,'fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89')# In[170]:import pandas as pdimport numpy as npdata = pd.read_csv('data/C2A2_data/BinnedCsvs_d400/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv')data['Date'] = pd.to_datetime(data['Date'])time_1 = pd.to_datetime('2008-02-29')time_2 = pd.to_datetime('2012-02-29')index_1 = data[data['Date'] == time_1].indexindex_2 = data[data['Date'] == time_2].indexdata = data.drop(index_1)data = data.drop(index_2)data_05_14 = data[data['Date'] < pd.to_datetime('2015-01-01')].copy()data_15 = data[data['Date'] >= pd.to_datetime('2015-01-01')].copy()# In[185]:# Processing data_05_14data_05_14 = data_05_14.sort_values('Date')data_05_14## Processing min temperature 2005-2014min_data = data_05_14[data_05_14['Element'] == 'TMIN']min_data['Date'] = min_data['Date'].apply(lambda x: pd.to_datetime('2015-' + str(x.month) + '-' + str(x.day)))min_data_dv = min_data.groupby('Date')['Data_Value'].agg('min')## Processing max temperature 2005-2014max_data = data_05_14[data_05_14['Element'] == 'TMAX']max_data['Date'] = max_data['Date'].apply(lambda x: pd.to_datetime('2015-' + str(x.month) + '-' + str(x.day)))max_data_dv = max_data.groupby('Date')['Data_Value'].agg('max')# Processing data_15data_15 = data_15.sort_values('Date')## Processing min temperature# In[196]:# Processing min temperaturemin_data_15 = data_15[data_15['Element'] == 'TMIN']min_data_15_dv = min_data_15.groupby('Date')['Data_Value'].agg('min')# Processing max temperaturemax_data_15 = data_15[data_15['Element'] == 'TMAX']max_data_15_dv = max_data_15.groupby('Date')['Data_Value'].agg('max')# In[203]:to_scatter_max = max_data_15_dv[max_data_15_dv > max_data_dv]to_scatter_min = min_data_15_dv[min_data_15_dv < min_data_dv]# In[261]:x_labels = [x for x in min_data_dv.index]x_15_max_labels = [x for x in to_scatter_max.index]x_15_min_labels = [x for x in to_scatter_min.index]plt.figure(figsize=(20, 15))plt.plot(x_labels, min_data_dv, '-o', color='lightgrey')plt.plot(x_labels, max_data_dv, '-o', color='darkgrey')max_t = plt.plot(x_15_max_labels,  to_scatter_max, 'o', markersize=8, color='red', label='High record')min_t = plt.plot(x_15_min_labels,  to_scatter_min, 'o', markersize=8, color='blue', label='Low record')plt.gca().fill_between(x_labels, min_data_dv, max_data_dv, color='grey', alpha=0.10)ax = plt.gca()ax.spines['top'].set_visible(False)ax.spines['right'].set_visible(False)ax.spines['bottom'].set_visible(False)ax.spines['left'].set_visible(False)plt.title("Record temperature in 2015 year")plt.legend(['Min temperature 2005-2014', 'Max temperature 2005-2014',            'Record high temperature', 'Record Low temperature'])for index, value in to_scatter_max.items():    plt.annotate(value, (index, value + 8))for index, value in to_scatter_min.items():    plt.annotate(value, (index, value + 8))    plt.yticks([])plt.ylabel("Tmperature (tenths of degrees C)")plt.xlabel("Days 2015 year")plt.savefig('plot.png')plt.show()# In[ ]:# coding: utf-8# # Assignment 3 - Building a Custom Visualization# # ---# # In this assignment you must choose one of the options presented below and submit a visual as well as your source code for peer grading. The details of how you solve the assignment are up to you, although your assignment must use matplotlib so that your peers can evaluate your work. The options differ in challenge level, but there are no grades associated with the challenge level you chose. However, your peers will be asked to ensure you at least met a minimum quality for a given technique in order to pass. Implement the technique fully (or exceed it!) and you should be able to earn full grades for the assignment.# # # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ferreira, N., Fisher, D., & Konig, A. C. (2014, April). [Sample-oriented task-driven visualizations: allowing users to make better, more confident decisions.](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/Ferreira_Fisher_Sample_Oriented_Tasks.pdf) # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (pp. 571-580). ACM. ([video](https://www.youtube.com/watch?v=BI7GAs-va-Q))# # # In this [paper](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/Ferreira_Fisher_Sample_Oriented_Tasks.pdf) the authors describe the challenges users face when trying to make judgements about probabilistic data generated through samples. As an example, they look at a bar chart of four years of data (replicated below in Figure 1). Each year has a y-axis value, which is derived from a sample of a larger dataset. For instance, the first value might be the number votes in a given district or riding for 1992, with the average being around 33,000. On top of this is plotted the 95% confidence interval for the mean (see the boxplot lectures for more information, and the yerr parameter of barcharts).# # <br># <img src="readonly/Assignment3Fig1.png" alt="Figure 1" style="width: 400px;"/># <h4 style="text-align: center;" markdown="1">  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Figure 1 from (Ferreira et al, 2014).</h4># # <br># # A challenge that users face is that, for a given y-axis value (e.g. 42,000), it is difficult to know which x-axis values are most likely to be representative, because the confidence levels overlap and their distributions are different (the lengths of the confidence interval bars are unequal). One of the solutions the authors propose for this problem (Figure 2c) is to allow users to indicate the y-axis value of interest (e.g. 42,000) and then draw a horizontal line and color bars based on this value. So bars might be colored red if they are definitely above this value (given the confidence interval), blue if they are definitely below this value, or white if they contain this value.# # # <br># <img src="readonly/Assignment3Fig2c.png" alt="Figure 1" style="width: 400px;"/># <h4 style="text-align: center;" markdown="1">  Figure 2c from (Ferreira et al. 2014). Note that the colorbar legend at the bottom as well as the arrows are not required in the assignment descriptions below.</h4># # <br># <br># # **Easiest option:** Implement the bar coloring as described above - a color scale with only three colors, (e.g. blue, white, and red). Assume the user provides the y axis value of interest as a parameter or variable.# # # **Harder option:** Implement the bar coloring as described in the paper, where the color of the bar is actually based on the amount of data covered (e.g. a gradient ranging from dark blue for the distribution being certainly below this y-axis, to white if the value is certainly contained, to dark red if the value is certainly not contained as the distribution is above the axis).# # **Even Harder option:** Add interactivity to the above, which allows the user to click on the y axis to set the value of interest. The bar colors should change with respect to what value the user has selected.# # **Hardest option:** Allow the user to interactively set a range of y values they are interested in, and recolor based on this (e.g. a y-axis band, see the paper for more details).# # ---# # *Note: The data given for this assignment is not the same as the data used in the article and as a result the visualizations may look a little different.*# In[3]:# Use the following data for this assignment:import pandas as pdimport numpy as npnp.random.seed(12345)df = pd.DataFrame([np.random.normal(32000,200000,3650),                    np.random.normal(43000,100000,3650),                    np.random.normal(43500,140000,3650),                    np.random.normal(48000,70000,3650)],                   index=[1992,1993,1994,1995])df# In[4]:df = df.Tmean_1992 = df[1992].mean()mean_1993 = df[1993].mean()mean_1994 = df[1994].mean()mean_1995 = df[1995].mean()means_list = [mean_1992, mean_1993, mean_1994, mean_1995]label_list = ['1992', '1993', '1994', '1995']# In[5]:import matplotlib.pyplot as pltimport math# In[8]:def get_color(mean, std_err, y):    if y > mean + std_err:        return 'blue'    elif y < mean - std_err:        return 'red'    else:        return 'lightgrey'first_y = 42000std_err = [200000 / math.sqrt(3650), 100000 / math.sqrt(3650),140000 / math.sqrt(3650),70000 / math.sqrt(3650)]plt.figure(figsize = (8,8), dpi=100)colors = [get_color(means_list[x], std_err[x], first_y) for x in range(4)]plt.bar([1,2,3,4], means_list, color = colors, yerr=std_err, ecolor='black', capsize=30)plt.axhline(y=first_y,linewidth=1, color='k', linestyle='--')plt.xticks([1,2,3,4], label_list)def onclick(event):    print('Hey!')    y_line = event.ydata    colors = [get_color(means_list[x], std_err[x], y_line) for x in range(4)]        plt.cla()    plt.bar([1,2,3,4], means_list, color=colors, yerr=std_err, ecolor='black', capsize=30)    plt.axhline(y=y_line,linewidth=1, color='k', linestyle='--')    plt.xticks([1,2,3,4], label_list)plt.gcf().canvas.mpl_connect('button_press_event', onclick)plt.savefig('assignment3.png')plt.show()# In[ ]:# coding: utf-8# # Assignment 2# # Before working on this assignment please read these instructions fully. In the submission area, you will notice that you can click the link to **Preview the Grading** for each step of the assignment. This is the criteria that will be used for peer grading. Please familiarize yourself with the criteria before beginning the assignment.# # An NOAA dataset has been stored in the file `data/C2A2_data/BinnedCsvs_d400/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv`. This is the dataset to use for this assignment. Note: The data for this assignment comes from a subset of The National Centers for Environmental Information (NCEI) [Daily Global Historical Climatology Network](https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/readme.txt) (GHCN-Daily). The GHCN-Daily is comprised of daily climate records from thousands of land surface stations across the globe.# # Each row in the assignment datafile corresponds to a single observation.# # The following variables are provided to you:# # * **id** : station identification code# * **date** : date in YYYY-MM-DD format (e.g. 2012-01-24 = January 24, 2012)# * **element** : indicator of element type#     * TMAX : Maximum temperature (tenths of degrees C)#     * TMIN : Minimum temperature (tenths of degrees C)# * **value** : data value for element (tenths of degrees C)# # For this assignment, you must:# # 1. Read the documentation and familiarize yourself with the dataset, then write some python code which returns a line graph of the record high and record low temperatures by day of the year over the period 2005-2014. The area between the record high and record low temperatures for each day should be shaded.# 2. Overlay a scatter of the 2015 data for any points (highs and lows) for which the ten year record (2005-2014) record high or record low was broken in 2015.# 3. Watch out for leap days (i.e. February 29th), it is reasonable to remove these points from the dataset for the purpose of this visualization.# 4. Make the visual nice! Leverage principles from the first module in this course when developing your solution. Consider issues such as legends, labels, and chart junk.# # The data you have been given is near **Ann Arbor, Michigan, United States**, and the stations the data comes from are shown on the map below.# In[1]:import matplotlib.pyplot as pltimport mplleafletimport pandas as pddef leaflet_plot_stations(binsize, hashid):    df = pd.read_csv('data/C2A2_data/BinSize_d{}.csv'.format(binsize))    station_locations_by_hash = df[df['hash'] == hashid]    lons = station_locations_by_hash['LONGITUDE'].tolist()    lats = station_locations_by_hash['LATITUDE'].tolist()    plt.figure(figsize=(8,8))    plt.scatter(lons, lats, c='r', alpha=0.7, s=200)    return mplleaflet.display()leaflet_plot_stations(400,'fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89')# In[170]:import pandas as pdimport numpy as npdata = pd.read_csv('data/C2A2_data/BinnedCsvs_d400/fb441e62df2d58994928907a91895ec62c2c42e6cd075c2700843b89.csv')data['Date'] = pd.to_datetime(data['Date'])time_1 = pd.to_datetime('2008-02-29')time_2 = pd.to_datetime('2012-02-29')index_1 = data[data['Date'] == time_1].indexindex_2 = data[data['Date'] == time_2].indexdata = data.drop(index_1)data = data.drop(index_2)data_05_14 = data[data['Date'] < pd.to_datetime('2015-01-01')].copy()data_15 = data[data['Date'] >= pd.to_datetime('2015-01-01')].copy()# In[185]:# Processing data_05_14data_05_14 = data_05_14.sort_values('Date')data_05_14## Processing min temperature 2005-2014min_data = data_05_14[data_05_14['Element'] == 'TMIN']min_data['Date'] = min_data['Date'].apply(lambda x: pd.to_datetime('2015-' + str(x.month) + '-' + str(x.day)))min_data_dv = min_data.groupby('Date')['Data_Value'].agg('min')## Processing max temperature 2005-2014max_data = data_05_14[data_05_14['Element'] == 'TMAX']max_data['Date'] = max_data['Date'].apply(lambda x: pd.to_datetime('2015-' + str(x.month) + '-' + str(x.day)))max_data_dv = max_data.groupby('Date')['Data_Value'].agg('max')# Processing data_15data_15 = data_15.sort_values('Date')## Processing min temperature# In[196]:# Processing min temperaturemin_data_15 = data_15[data_15['Element'] == 'TMIN']min_data_15_dv = min_data_15.groupby('Date')['Data_Value'].agg('min')# Processing max temperaturemax_data_15 = data_15[data_15['Element'] == 'TMAX']max_data_15_dv = max_data_15.groupby('Date')['Data_Value'].agg('max')# In[203]:to_scatter_max = max_data_15_dv[max_data_15_dv > max_data_dv]to_scatter_min = min_data_15_dv[min_data_15_dv < min_data_dv]# In[261]:x_labels = [x for x in min_data_dv.index]x_15_max_labels = [x for x in to_scatter_max.index]x_15_min_labels = [x for x in to_scatter_min.index]plt.figure(figsize=(20, 15))plt.plot(x_labels, min_data_dv, '-o', color='lightgrey')plt.plot(x_labels, max_data_dv, '-o', color='darkgrey')max_t = plt.plot(x_15_max_labels,  to_scatter_max, 'o', markersize=8, color='red', label='High record')min_t = plt.plot(x_15_min_labels,  to_scatter_min, 'o', markersize=8, color='blue', label='Low record')plt.gca().fill_between(x_labels, min_data_dv, max_data_dv, color='grey', alpha=0.10)ax = plt.gca()ax.spines['top'].set_visible(False)ax.spines['right'].set_visible(False)ax.spines['bottom'].set_visible(False)ax.spines['left'].set_visible(False)plt.title("Record temperature in 2015 year")plt.legend(['Min temperature 2005-2014', 'Max temperature 2005-2014',            'Record high temperature', 'Record Low temperature'])for index, value in to_scatter_max.items():    plt.annotate(value, (index, value + 8))for index, value in to_scatter_min.items():    plt.annotate(value, (index, value + 8))    plt.yticks([])plt.ylabel("Tmperature (tenths of degrees C)")plt.xlabel("Days 2015 year")plt.savefig('plot.png')plt.show()# In[ ]: